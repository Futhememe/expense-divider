import {
  Button,
  Divider,
  Heading,
  Tooltip,
  useDisclosure,
} from "@chakra-ui/react";
import type { NextPage } from "next";
import Head from "next/head";
import { Container } from "../../components/Container";
import { Main } from "../../components/Main";
import { Percentage } from "../../components/Percentage";
import { ExpenseModal } from "../../components/ExpenseModal";
import { useLocalStorage } from "../../hooks/useLocalStorage";
import {
  ConfigDTO,
  ExpenseDTO,
  useConfigStore,
  useExpenseStore,
} from "../../store";
import { useEffect, useState } from "react";
import { DeleteModal } from "../../components/DeleteModal";
import { TotalSection } from "../../components/TotalSection";
import { Expense } from "../../components/Expense";
import { SimpleConfigModal } from "../../components/SimpleConfig";
import { getValuePercentage } from "../../utils/formatters";

const Expenses: NextPage = () => {
  const { isOpen, onOpen, onClose } = useDisclosure();
  const {
    isOpen: isDeleteOpen,
    onOpen: onDeleteOpen,
    onClose: onDeleteClose,
  } = useDisclosure();
  const {
    isOpen: isConfigOpen,
    onOpen: onConfigOpen,
    onClose: onConfigClose,
  } = useDisclosure();
  const [storageList] = useLocalStorage<ExpenseDTO[]>("expenseList", []);
  const [config] = useLocalStorage<ConfigDTO>("config", {
    firstUser: {
      name: "Pessoa 1",
      percentage: 50,
    },
    secondUser: {
      name: "Pessoa 2",
      percentage: 50,
    },
  });
  const {
    config: { firstUser, secondUser },
    editConfig,
  } = useConfigStore();
  const { setAllExpenses, expenseList } = useExpenseStore();
  const [selectedExpense, setSelectedExpense] = useState<string | null>(null);
  const [modalMode, setModalMode] = useState<"edit" | "idle">("idle");

  useEffect(() => {
    setAllExpenses(storageList);
  }, [storageList, setAllExpenses]);

  useEffect(() => {
    editConfig(config);
  }, [config, editConfig]);

  return (
    <Container>
      <Head>
        <title>Expense divider</title>
        <meta
          name="description"
          content="Generated by Futhememe boilerplate generator"
        />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <DeleteModal
        isOpen={isDeleteOpen}
        onClose={onDeleteClose}
        expenseId={selectedExpense ?? ""}
      />
      <ExpenseModal
        isOpen={isOpen}
        onClose={onClose}
        mode={modalMode}
        selectedId={selectedExpense ?? ""}
      />
      <SimpleConfigModal isOpen={isConfigOpen} onClose={onConfigClose} />
      <Main>
        <Heading textAlign="center">Despesas</Heading>
        <Percentage onClickEdit={() => onConfigOpen()} />
        <Tooltip
          placement="bottom"
          label="Clique aqui para adicionar um novo lanÃ§amento"
        >
          <Button
            w="100%"
            colorScheme="green"
            onClick={() => {
              setModalMode("idle");
              onOpen();
            }}
          >
            nova despesa
          </Button>
        </Tooltip>
        <Divider />
        {expenseList.length > 0 && <TotalSection />}
        {expenseList.map((expense) => (
          <Expense
            key={expense.id}
            name={expense.expenseName}
            total={expense.total}
            firstAmount={getValuePercentage(
              expense.total,
              firstUser.percentage
            )}
            secondAmount={getValuePercentage(
              expense.total,
              secondUser.percentage
            )}
            onClickEdit={() => {
              setSelectedExpense(expense.id);
              setModalMode("edit");
              onOpen();
            }}
            onClickDelete={() => {
              onDeleteOpen();
              setSelectedExpense(expense.id);
            }}
          />
        ))}
      </Main>
    </Container>
  );
};

export default Expenses;
